/* 
 * 학과 : 경제학부
 * 학번 : 2012048908
 * 이름 : 조우진
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;				

public class ChatServer {				

	public static void main(String[] args) {			
		try{		
			ServerSocket server = new ServerSocket(10001);	
			System.out.println("접속을 기다립니다.");	
			HashMap hm = new HashMap();	
			while(true){	
				Socket sock = server.accept();
				ChatThread chatthread = new ChatThread(sock, hm);
				chatthread.start();
			} // while	
		}catch(Exception e){	
			System.out.println(e);
		}	
	} // main		
}			

class ChatThread extends Thread{			
	private Socket sock;		
	private String id;		
	private BufferedReader br;		
	private HashMap hm;		
	private boolean initFlag = false;
	String[] ban = {"씨발", "병신", "찐따", "호구", "바보"};
	public ChatThread(Socket sock, HashMap hm){		
		this.sock = sock;	
		this.hm = hm;	
		try{	
			PrintWriter pw = new PrintWriter(new OutputStreamWriter(sock.getOutputStream()));	
			br = new BufferedReader(new InputStreamReader(sock.getInputStream()));	
			id = br.readLine();	
			broadcast(id + "님이 접속하였습니다.");	
			System.out.println("접속한 사용자의 아이디는 " + id + "입니다.");	
			synchronized(hm){	
				hm.put(this.id, pw);
			}	
			initFlag = true;	
		}catch(Exception ex){		
			System.out.println(ex);	
		}		
	} // 생성자			
	public void run(){			
		try{		
			String line = null;	
			while((line = br.readLine()) != null){		
				if(line.equals("/quit"))	
					break;
				if(line.indexOf("/to ") == 0){	
					sendmsg(line);
				}
				//userlist실행을 위한 명령문 설정
				else if(line.indexOf("/userlist") == 0){
					senduserlist();
				}else{
					for(int i = 0; i < ban.length; i++){
						if(line.equals(ban[i])){
							
						}else{
							broadcast(id + " : " + line);
						}
					}
				}
			}		
		}catch(Exception ex){			
			System.out.println(ex);		
		}finally{			
			synchronized(hm){		
				hm.remove(id);	
			}		
			broadcast(id + " 님이 접속 종료하였습니다.");		
			try{		
				if(sock != null)	
					sock.close();
			}catch(Exception ex){}		
		}			
	} // run				
	public void sendmsg(String msg){
		int start = msg.indexOf(" ") +1;			
		int end = msg.indexOf(" ", start);			
		if(end != -1){			
			String to = msg.substring(start, end);		
			String msg2 = msg.substring(end+1);		
			Object obj = hm.get(to);		
			if(obj != null){		
				PrintWriter pw = (PrintWriter)obj;	
				pw.println(id + " 님이 다음의 귓속말을 보내셨습니다. :" + msg2);	
				pw.flush();	
			} // if	
		}		
	} // sendmsg			
	public void broadcast(String msg){
		//현재 시간을 표시하기 위한 코드
		long time = System.currentTimeMillis();
		SimpleDateFormat sdf = new SimpleDateFormat("[hh시 mm분 ss초]");
		String daytime = sdf.format(new Date(time));
		synchronized(hm){
			Collection collection = hm.values();	
			Iterator iter = collection.iterator();	
			while(iter.hasNext()){
				PrintWriter pw = (PrintWriter)iter.next();
				pw.println(daytime + msg);
				pw.flush();
			}
		}		
	} // broadcast
	//userlist출력
	public void senduserlist(){
		synchronized(hm){
			Collection collection = hm.keySet();
			Iterator iter = collection.iterator();
			//hm에서 id를 받아와서 객체화
			Object obj = hm.get(id);
			if(obj != null){
				//객체화한 id를 출력할수 있도록 PrintWriter로 형을 맞추어주기
				PrintWriter pw = (PrintWriter)obj;
				while(iter.hasNext()){
					String str = (String)iter.next();
					//사용자의 아이디를 출력
					pw.println(str);
					pw.flush();
				}
				//현재 접속자 수를 알려주는 코드
				pw.println("총 " + hm.size() + "명 접속 중");
				pw.flush();
			}
		}
	}
	public void ban(){
		synchronized(hm){
			Collection collection = hm.keySet();
			Iterator iter = collection.iterator();
			Object obj = hm.get(id);
			if(obj != null){
				PrintWriter pw = (PrintWriter)obj;
				while(iter.hasNext()){
					String str = (String)iter.next();
					pw.println("욕하지마");
					pw.flush();
				}
			}
		}
	}
}
}
}
/*
 * (1) InputThread
 * 채팅을 입력하고 있는중에 다른사람이 채팅을 하여 메세지를 보낼경우 CMD창에서는 문자를 입력하고 있는 커서의 바로뒤에 출력이 된다.
 * 따라서 이때 Thread를 사용하지 않으면 많은 사람이 채팅을 할 경우 채팅을 입력하다 계속 출력으로 메세지가 끊어져서 채팅을 할수가 없게된다.
 * 그래서 언제든지 쓰던것을 계속 쓸 수 있도록 InputThread를 사용하여 입력을 받는다.
 * 
 * (2) broadcast()&sendmsg()에서 hm사용법
 * hm(HashMap)에 접속자의 ID를 저장하고, 이를 broadcast()를 통해 hm에 key로 등록되어 있는 모든 사용자 ID에 모두 메세지를 보내게 한다.
 * sendmsg()는 hm에서 귓속말을 보내고자 하는 상대방의 ID와 hm에 등록되어 있는 key값과 비교하여 일치하는 사람에게만 메세지를 전송한다.
 */