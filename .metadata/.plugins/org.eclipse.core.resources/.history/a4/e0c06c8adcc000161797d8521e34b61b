import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collection;
import java.util.HashMap;

/*
기능 예시
----------------------Lab(2016.12.08)----------------------
1.금지어(array list를 통해 금지어를 지정해둔다. & 귓속말기능과 같이 금지어가 나오면 broadcast를 하지않고 해다 id에게 금지어라는 메세지를 보내준다.)
2.얼리기(전체 채팅금지 / 몇 초간 broadcast를 하지 않게 한다.)
3.방장 등 계급을 부여하기(HashMap에 ID를 객체로 만들어서 권한을 부여)
4.접속 유저보기(HashMap에서 ID를 출력해주기)
5.강퇴(HashMap에서 ID를 지운다. => broadcast를 받지 못하게된다.)
6.아이디 변경(HashMap에서 ID를 삭제하고 value값을 새로 만든 ID에 넣어준다.)
7.공지(일정시간마다 broadcast하게 해준다.)
8.채팅금지(개인)
9.매크로(client에서 구현/ 몇 초에 한번씩 메세지 전송)
----------------------수업(2016.12.13)----------------------
10.혼자말(자기 value로 보내기)
*/     

public class ChatServer {

	public static void main(String[] args) {
		try{
			ServerSocket server = new ServerSocket(10001);
			System.out.println("접속을 기다립니다.");
			//HashMap : 위치로 값을 찾는 array와 달리 고유의 key를 부여하여 저장 ex)ID
			HashMap hm = new HashMap();//note3.pdf 참조
			//Socket를 accept 한다. 여러명을 받아야하기 때문에 Thread를 통해 계속해서 accept 할 수 있도록 대기
			while(true){
				Socket sock = server.accept();
				ChatThread chatthread = new ChatThread(sock, hm);
				chatthread.start();
			} // while
		//오류를 잡기
		}catch(Exception e){
			System.out.println(e);
		}
	} // main
}

class ChatThread extends Thread{
	private Socket sock;
	private String id;
	private BufferedReader br;
	private HashMap hm;
	private boolean initFlag = false;
	//ChatThread 초기화
	public ChatThread(Socket sock, HashMap hm){
		this.sock = sock;
		this.hm = hm;
		try{
			//PrintWriter을 OutputStreamWriter을 통해서 출력한다.
			PrintWriter pw = new PrintWriter(new OutputStreamWriter(sock.getOutputStream()));
			//BufferedReader를 InputStreamReader을 통해서 입력을 받는다.
			br = new BufferedReader(new InputStreamReader(sock.getInputStream()));
			id = br.readLine();
			broadcast(id + "님이 접속하였습니다.");
			System.out.println("접속한 사용자의 아이디는 " + id + "입니다.");
			//synchronized를 통해서 동시에 들어오는 요청에 순서를 부여한다.
			synchronized(hm){
				//요청을 HashMap에 넣어준다.
				//이를 통해서 broadcast로 모두에게 안내말(Ex:입장, 종료)을 보내거나 개인에게 귓속말을 할 수 있게 한다.(id사용)
				hm.put(this.id, pw);
			}
			initFlag = true;
		}catch(Exception ex){
			System.out.println(ex);
		}
	} // 생성자
	public void run(){
		try{
			String line = null;
			while((line = br.readLine()) != null){
				//종료
				if(line.equals("/quit"))
					break;
				//귓속말
				if(line.indexOf("/to ") == 0){
					sendmsg(line);
				//종료와 귓속말이 아니면 broadcast를 통해 모두에게 말한다.
				}else if(line.indexOf("/self ") == 0){
					selfmsg(line);
				}else
					broadcast(id + " : " + line);
			}
		//오류 잡기.
		}catch(Exception ex){
			System.out.println(ex);
		//Finally : try에서 Error가 나더라도 반드시 실행해준다.
		}finally{
			synchronized(hm){
				hm.remove(id);
			}
			broadcast(id + " 님이 접속 종료하였습니다.");
			try{
				if(sock != null)
					sock.close();
			}catch(Exception ex){}
		}
	} // run
	public void sendmsg(String msg){
		//누구에게 메세지를 보낼지, 어떤 내용을 보낼지내용을 정리
		int start = msg.indexOf(" ") +1;
		int end = msg.indexOf(" ", start);
		if(end != -1){
			String to = msg.substring(start, end);
			String msg2 = msg.substring(end+1);
			
			Object obj = hm.get(to);
			if(obj != null){
				PrintWriter pw = (PrintWriter)obj;
				pw.println(id + " 님이 다음의 귓속말을 보내셨습니다. :" + msg2);
				pw.flush();
			} // if
		}
	} // sendmsg
	public void broadcast(String msg){
		synchronized(hm)/*note3.pdf 참조*/{
			//HashMap는 key와 value로 저장 values는 모든 value값
			//Collection을 통해서 value값을 배열로 저장
			Collection collection = hm.values();
			//Iterator : 반복자
			//collection.iterator collection을 iterator로 바꿔준다.
			Iterator iter = collection.iterator();
			while(iter.hasNext()){
				PrintWriter pw = (PrintWriter)iter.next();
				pw.println(msg);
				pw.flush();
			}
		}//synchronized
	} // broadcast
	public void selfmsg(String msg){
		pw.println(msg);
	}
}